// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package commandgraphql

import (
	"bytes"
	"fmt"
	"io"
	"strconv"
)

type AddMemberInput struct {
	GroupChatID   string `json:"groupChatId"`
	UserAccountID string `json:"userAccountId"`
	Role          Role   `json:"role"`
	ExecutorID    string `json:"executorId"`
}

type CreateGroupChatInput struct {
	Name       string `json:"name"`
	ExecutorID string `json:"executorId"`
}

type DeleteGroupChatInput struct {
	GroupChatID string `json:"groupChatId"`
	ExecutorID  string `json:"executorId"`
}

type DeleteMessageInput struct {
	GroupChatID string `json:"groupChatId"`
	MessageID   string `json:"messageId"`
	ExecutorID  string `json:"executorId"`
}

type EditMessageInput struct {
	GroupChatID string `json:"groupChatId"`
	MessageID   string `json:"messageId"`
	Content     string `json:"content"`
	ExecutorID  string `json:"executorId"`
}

type GroupChatResult struct {
	GroupChatID string `json:"groupChatId"`
}

type MessageResult struct {
	GroupChatID string `json:"groupChatId"`
	MessageID   string `json:"messageId"`
}

type MutationRoot struct {
}

type PostMessageInput struct {
	GroupChatID string `json:"groupChatId"`
	Content     string `json:"content"`
	ExecutorID  string `json:"executorId"`
}

type QueryRoot struct {
}

type RemoveMemberInput struct {
	GroupChatID   string `json:"groupChatId"`
	UserAccountID string `json:"userAccountId"`
	ExecutorID    string `json:"executorId"`
}

type RenameGroupChatInput struct {
	GroupChatID string `json:"groupChatId"`
	Name        string `json:"name"`
	ExecutorID  string `json:"executorId"`
}

type Role string

const (
	RoleMember Role = "MEMBER"
	RoleAdmin  Role = "ADMIN"
)

var AllRole = []Role{
	RoleMember,
	RoleAdmin,
}

func (e Role) IsValid() bool {
	switch e {
	case RoleMember, RoleAdmin:
		return true
	}
	return false
}

func (e Role) String() string {
	return string(e)
}

func (e *Role) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Role(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Role", str)
	}
	return nil
}

func (e Role) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *Role) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e Role) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}
